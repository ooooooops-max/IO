name: GitHub CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read

env:
  REPO_NAME: ${{ github.repository }}
  EVENT_NAME: ${{ github.event_name }}

jobs:
  linux-bazel:
    name: Bazel Linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: GCP
        run: |
          cat > service_account_creds.json << EOF
          ${{ secrets.GCP_CREDS }}
          EOF
      - name: Bazel on Linux
        shell: bash
        run: |
          set -x
          docker system prune --all --force
          docker images
          docker ps -a
          df -h
          # See https://github.com/actions/runner-images/issues/2840
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
          # See https://github.com/actions/runner-images/issues/2606
          sudo rm -rf /usr/local/lib/android
          df -h
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          df -h
          #export BAZEL_OPTIMIZATION="--config=optimization --config=linux_ci --config=cache"
          #if [[ "${{ env.EVENT_NAME }}" == "push" && "${{ env.REPO_NAME }}" == "tensorflow/io" ]]; then
          #  export BAZEL_OPTIMIZATION="${BAZEL_OPTIMIZATION} --remote_upload_local_results=true --google_credentials=service_account_creds.json"
          #fi
          TENSORFLOW_VERSION=$(grep tensorflow tensorflow_io/python/ops/version_ops.py | sed -e "s/require = //g" | awk -F, '{print $1}' | awk -F= '{print $2}' | awk -F. '{print $1"."$2}')
          DOCKER_BUILDKIT=0 docker build -t io -f tools/docker/build.Dockerfile --build-arg PYTHON_VERSION=3.10 --build-arg TENSORFLOW_VERSION="${TENSORFLOW_VERSION}" --build-arg BAZEL_OPTIMIZATION="${BAZEL_OPTIMIZATION}" .
          docker create -it --name io io bash
          sleep 5
          docker cp -L io:/opt/io/bazel-bin build
          docker cp -L io:/opt/io/.bazelrc build/tensorflow_io/
          sudo chown -R $(id -nu):$(id -ng) .
          find build/tensorflow_io -type f
          find build/tensorflow_io_gcs_filesystem -type f
          find build/tensorflow_io -type l
          find build/tensorflow_io_gcs_filesystem -type l
          find build/tensorflow_io -name '*runfiles*'
          find build/tensorflow_io_gcs_filesystem -name '*runfiles*'
          find build/tensorflow_io -name '*runfiles*' | xargs rm -rf
          find build/tensorflow_io_gcs_filesystem -name '*runfiles*' | xargs rm -rf
          sudo rm -rf build/tensorflow_io/core/golang_ops.h
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ runner.os }}-bazel-bin
          path: |
            build/tensorflow_io
            build/tensorflow_io_gcs_filesystem

  linux-wheel:
    name: Wheel ${{ matrix.python }} Linux
    needs: linux-bazel
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: ${{ runner.os }}-bazel-bin
          path: bazel-bin
      - name: Wheel ${{ matrix.python }} Linux
        run: |
          set -x -e
          mv bazel-bin/tensorflow_io/.bazelrc .
          docker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --data bazel-bin -q bdist_wheel
          rm -rf build
          docker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel
      - name: Auditwheel ${{ matrix.python }} Linux
        run: |
          set -x -e
          ls dist/*
          for f in dist/*.whl; do
            docker run -i --rm -v $PWD:/v -w /v --net=host quay.io/pypa/manylinux2014_x86_64 bash -x -e /v/tools/build/auditwheel repair --plat manylinux2014_x86_64 $f
          done
          sudo chown -R $(id -nu):$(id -ng) .
          ls wheelhouse/*
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ runner.os }}-${{ matrix.python }}-wheel
          path: wheelhouse
